// Code generated by MockGen. DO NOT EDIT.
// Source: interface/middleware/auth_middleware.go

// Package mock_middleware is a generated GoMock package.
package mock_middleware

import (
	middlewarehelper "GoBBS/interface/middleware/middlewarehelper"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// VerifyAuth mocks base method.
func (m *MockAuth) VerifyAuth(arg0 middlewarehelper.HandlerFunc) middlewarehelper.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuth", arg0)
	ret0, _ := ret[0].(middlewarehelper.HandlerFunc)
	return ret0
}

// VerifyAuth indicates an expected call of VerifyAuth.
func (mr *MockAuthMockRecorder) VerifyAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuth", reflect.TypeOf((*MockAuth)(nil).VerifyAuth), arg0)
}
