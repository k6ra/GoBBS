// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/user_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	dto "GoBBS/dto"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockUser) Authorize(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockUserMockRecorder) Authorize(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockUser)(nil).Authorize), email, password)
}

// Delete mocks base method.
func (m *MockUser) Delete(arg0 *dto.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUser)(nil).Delete), arg0)
}

// Regist mocks base method.
func (m *MockUser) Regist(arg0 *dto.User, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Regist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Regist indicates an expected call of Regist.
func (mr *MockUserMockRecorder) Regist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Regist", reflect.TypeOf((*MockUser)(nil).Regist), arg0, arg1)
}

// Update mocks base method.
func (m *MockUser) Update(arg0 *dto.User, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUser)(nil).Update), arg0, arg1)
}

// VerifyAuthorization mocks base method.
func (m *MockUser) VerifyAuthorization(token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuthorization", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyAuthorization indicates an expected call of VerifyAuthorization.
func (mr *MockUserMockRecorder) VerifyAuthorization(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthorization", reflect.TypeOf((*MockUser)(nil).VerifyAuthorization), token)
}
